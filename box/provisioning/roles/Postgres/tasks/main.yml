---
- name: 1. Ensure bash, OpenSSl, and libssl are the latest versions
  apt:
    name: "{{ item }}"
    update_cache: true
    state: latest
  loop: [bash, openssl, libssl-dev, libssl-doc]
  tags: packages
  become: yes
  become_method: sudo

- name: 2. Install PostgreSQL
  apt:
    name: "{{ item }}"
    update_cache: true
    state: latest
  loop: [postgresql, postgresql-contrib, libpq-dev, python-psycopg2]
  tags: packages
  become: yes
  become_method: sudo

- name: 3. Ensure the PostgreSQL service is running
  service:
    name: postgresql
    state: started
    enabled: yes

- name: 4. Set PostgreSQL to listen on all ip addresses
  become: yes
  become_user: postgres
  replace:
    regexp: "#listen_addresses = \'localhost\'"
    replace: listen_addresses = '*'
    path: /etc/postgresql/{{ psql_version }}/main/postgresql.conf
  notify: Restart Postgres

- name: 5. Allow md5 locally
  become: yes
  become_user: postgres
  replace:
    regexp: local    all             all             all                     md5'
    replace: local    all             all             md5
    path: /etc/postgresql/{{ psql_version }}/main/pg_hba.conf
  notify: Restart Postgres

- name: 6. Add host password auth
  become: yes
  become_user: postgres
  lineinfile:
    state: present
    insertafter: EOF
    line: host    all             all             0.0.0.0/0                     md5
    path: /etc/postgresql/{{ psql_version }}/main/pg_hba.conf
  notify: Restart Postgres

- name: 7. Ensure database is created
  become: yes
  become_user: postgres
  postgresql_db:
    name: "{{ db_name }}"
    encoding: UTF-8
    lc_collate: en_US.UTF-8
    lc_ctype: en_US.UTF-8
    template: template0
    state: present

- name: 8. Ensure user has access to the database
  become: yes
  become_user: postgres
  postgresql_user:
    db: "{{ db_name }}"
    name: "{{ db_user }}"
    password: "{{ db_password }}"
    priv: ALL
    state: present

- name: 9. Ensure user does not have unnecessary privileges
  become: yes
  become_user: postgres
  postgresql_user:
    name: "{{ db_user }}"
    role_attr_flags: NOSUPERUSER,NOCREATEDB
    state: present